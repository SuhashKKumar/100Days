01. replace => Link tag prop, which uses to navigate to Home Page from the nested routes
02. usePathname => Navigation hook which gives the url in the form of a string
03. useRouter => Navigation hook which helps to navigate programmatically
04. useRouter().push("route-name-goes-here") => will navigate to that particular usePathname
05. useRouter().back() => navigates to the previous page of the browser
06. useRouter().forward() => navigates to the next page of the browser
07. layout.jsx => doesn't remount component, state is preserved, effects are in synchronized
08. template.jsx => will remount component, state is not preserved, effects are  re-synchronized
09. error.jsx => used to catch the errors
10. component hierarchy as follow:
    layout => template => error boundary => suspense => error boundary => page
11. reset => is a function prop from error.jsx file, which helps to reset the UI
12. loading.jsx => will displays the content of this file, when the data is being fetched.
13. default.tsx => to display the contents, when the route doesn't matches.
14. (.)folderName => intercepting routes, to mach segments on the same level
15. (..) => to match one level above
16. (..)(..) => to match two levels above
17. (...) =>to match from the root app directory
18. The outermost layer will be layout.jsx and then template.jsx
19. JSON.stringify(OBJECT) => converts object into string.
20. STRING.json() => converts string into object
21. Array.find() => will return the first item, whichever satisfies the condition
22. Array.filter() => will return an array of items, whichever satisfies the condition
23. Number(STRING) => converts string into number type, it can handle any format including Boolean
24. parseInt(STRING) => converts string into number type, it stops parsing as soon as it encounters a non-numeric character(or a decimal point)
25. request.headers => to read headers that are coming from the request API
26. request() => import from next/headers, second method for reading headers
27. cookies, headers => are imported from next/headers
28. Suspense => a tag from react, which is used for streaming
29. server-only => an npm package which prevents client components to use server side information
30. client-only => an npm package which prevents client components to use client side information
31. we don't convert server components to client components, instead we create separate file for client logic and invoke/import it in server file
32. If we use "use client" in one component, the child server components also converts to client components. So we need to use client components, in a specified component.
33. Can't import a server comp into client comp. Instead we need to pass that server comp as a child prop to client comp





